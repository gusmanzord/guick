#set( $js  = "$")
#set( $entityBeanName = ${util.uncapitalize($entity.name)} )
#set( $projectBeanName = ${util.uncapitalize($project.name)} )

(function() {
	'use strict';

/**
 *  Guick Generate class: https://github.com/wdavilaneto/guick
 *  Author: service-wdavilaneto@redhat.com
 *  This source is free under The Apache Software License, Version 2.0
 *  license url http://www.apache.org/licenses/LICENSE-2.0.txt
 *
 * @ngdoc function
 * @name ${projectBeanName}App.controller:${entityBeanName}Controller
 * @description
 * # ${entityBeanName}Controller
 * Controller of the ${projectBeanName}App
 */
angular.module('${projectBeanName}App')

    .controller('${entityBeanName}EditMainController', ['${js}scope', '${js}state', '${js}stateParams', '${js}modal', '${js}location', 'jsog', '${entityBeanName}Service', #foreach( ${ent} in ${entity.getDistinctedAllComplexProperties()})#set( $beanName = ${util.uncapitalize($ent.referedEntity.name)} )#if(${beanName} != ${entityBeanName})'${beanName}Service', #{end}#{end}
     function (${js}scope, ${js}state, ${js}stateParams , ${js}modal, ${js}location, jsog, ${entityBeanName}Service #foreach( ${ent} in ${entity.getDistinctedAllComplexProperties()})#set( $beanName = ${util.uncapitalize($ent.referedEntity.name)} )#if(${beanName} != ${entityBeanName}), ${beanName}Service#{end}#{end} ) {

    // ***************************
    // Model Initializations
    // ***************************
    ${js}scope.maxSelectBoxSize = 300;
    ${js}scope.searchSelects = ${entityBeanName}Service.factorySearchSelect(); // Text Search Select utility Object

    $scope.save = function() {
        //$scope.$broadcast('show-errors-check-validity');
        //if any invalid validation
        //if (!$scope.mainForm || $scope.mainForm.$invalid) {
        console.log('TODO: Validate Errors');
        //    return;
        //}

        console.log('Requesting save on ${entityBeanName}');
        ${js}scope.searchSelects.toEntity(${js}scope.entity);
        ${entityBeanName}Service.save( ${js}scope.entity , function (successResult) {
            console.log(successResult);
            ${js}scope.entity = ${entityBeanName}Service.create();
            ${js}state.go('${entity.beanName}Search', {}, {reload: true});
        });
    };

    $scope.saveContinue = function() {
        //$scope.$broadcast('show-errors-check-validity');
        //if any invalid validation
        //if (!$scope.mainForm || $scope.mainForm.$invalid) {
        console.log('TODO: Validate Errors');
        //    return;
        //}

        console.log('Requesting save on ${entityBeanName}');
        ${js}scope.searchSelects.toEntity(${js}scope.entity);
        ${entityBeanName}Service.save( ${js}scope.entity , function (successResult) {
            console.log(successResult);
            ${js}state.go('${entity.beanName}Edit.main', {id: successResult.id }, {reload: true});

        });
    };

    // ******************************************************************************************
    // Modals methods definitions
    // ******************************************************************************************
    // Create ${entity.name} Modal Window
    ${js}scope.open = function (size) {
        ${js}scope.searchSelects.toEntity(${js}scope.entity);
        var modalInstance = ${js}modal.open({
            templateUrl: 'create${entity.name}Modal.html', controller: 'Modal${entity.name}Controller', size: size,
            resolve: {
                data: function () {return $scope.entity;}
            }
        });
        modalInstance.result.then(function (selectedItem) {
            ${js}scope.selected = selectedItem;
            // Refreshing Result List
            ${js}scope.entity = ${entityBeanName}Service.create();
            ${js}scope.search();
        }, function () {
            //dismiss
        });
    };

    // Create ${entity.name} Modal Window
    ${js}scope.view = function (size, entityName) {
        ${js}scope.searchSelects.toEntity(${js}scope.entity);
        var modalInstance = ${js}modal.open({
            templateUrl: ('view' +entityName+ 'Modal.html'), controller: 'Modal' +entityName+ 'Controller', size: size,
            resolve: {
                data: function () {
                    return $scope.entity;
                }
            }
        });
    };

    $scope.remove = function (obj){
        var modalInstance = ${js}modal.open({
            templateUrl: 'confirmRemove${entity.name}Modal.html', controller: 'Modal${entity.name}Controller', size: 'lg',
            resolve: {
                data: function () {return $scope.entity;},
                readonly: function() {return true;}
            }
        });
        modalInstance.result.then(function (selectedItem) {
            //${js}scope.search();
            ${js}state.go('${entityBeanName}Search', {}, {reload: true});
        }, function () {
            //dismiss
        });
    };

    // Inline Update Modal
    ${js}scope.edit${entity.name} = function (obj) {
        var modalInstance = ${js}modal.open({
            templateUrl: 'create${entity.name}Modal.html', controller: 'Modal${entity.name}Controller', size: 'lg',
            resolve: {
                data: function () {return obj;},
                readonly: function() {return false;}
            }
        });
        modalInstance.result.then(function (selectedItem) {
            ${js}scope.selected = selectedItem;
             // Refreshing Result List
            ${js}scope.search();
        }, function () {
            //dismiss
        });
    };

    // ****************************************
    // Controller init (on load) service calls
    // ****************************************
    // if in edit mode get the wanted ${entityBeanName}
    if (${js}stateParams.id) {
        // This controller exped get method declared on Parent Controller ${entity.beanName}.edit.controller
        // parent controller is declared on ${entity.beanName}.route
        ${js}scope.get( ${js}stateParams.id);
    }

    // Selects to Fullfill select boxes
    // Begin block
#foreach( ${ent} in ${entity.getDistinctedAllComplexProperties()})
#if( ${ent.isManyToOne()} && !${ent.referedEntity.looksLikeMainEntity()})## Caso nao seja muito grande e portanto caiba num select box ...
#set( $beanName = ${util.uncapitalize($ent.referedEntity.name)} )
    ${beanName}Service.findAll( {page:1 , size:${js}scope.maxSelectBoxSize}  , function (data) {
         ${js}scope.${beanName}List = jsog.decode(data.content);
    });
#end
#end
    // end block

}]);

})();
