#set( $js  = "$")
#set( $entityBeanName = ${util.uncapitalize($entity.name)} )
#set( $projectBeanName = ${util.uncapitalize($project.name)} )

(function() {
	'use strict';

/**
 *  Guick Generate class: https://github.com/wdavilaneto/guick
 *  Author: service-wdavilaneto@redhat.com
 *  This source is free under The Apache Software License, Version 2.0
 *  license url http://www.apache.org/licenses/LICENSE-2.0.txt
 *
 * @ngdoc function
 * @name ${projectBeanName}App.controller:${entityBeanName}Controller
 * @description
 * # ${entityBeanName}Controller
 * Controller of the ${projectBeanName}App
 */
angular.module('${projectBeanName}App')
    .controller('${entityBeanName}EditMainController', ${entityBeanName}EditMainController);

    ${entityBeanName}EditMainController.$inject = ['${js}scope', '${js}state', '${js}stateParams', '${js}modal', '${js}location', 'jsog', '${entityBeanName}Service'#foreach( ${ent} in ${entity.getDistinctedAllComplexProperties()})#set( $beanName = ${util.uncapitalize($ent.referedEntity.name)} )#if(${beanName} != ${entityBeanName}), '${beanName}Service'#{end}#{end}];

    function ${entityBeanName}EditMainController(${js}scope, ${js}state, ${js}stateParams , ${js}modal, ${js}location, jsog, ${entityBeanName}Service #foreach( ${ent} in ${entity.getDistinctedAllComplexProperties()})#set( $beanName = ${util.uncapitalize($ent.referedEntity.name)} )#if(${beanName} != ${entityBeanName}), ${beanName}Service#{end}#{end} ) {

        var vm = this;

        vm.searchSelects = ${entityBeanName}Service.factorySearchSelect(); // Text Search Select utility Object

        // ***************************
        // Model Initializations
        // ***************************
            vm.maxSelectBoxSize = 300;

        vm.save = function () {
            //$scope.$broadcast('show-errors-check-validity');
            //if any invalid validation
            //if (!$scope.mainForm || $scope.mainForm.$invalid) {
            console.log('TODO: Validate Errors');
            //    return;
            //}

            console.log('Requesting save on ${entityBeanName}');
                vm.searchSelects.toEntity(vm.entity);
                ${entityBeanName}Service.save(vm.entity, function (successResult) {
                console.log(successResult);
                    vm.entity = ${entityBeanName}Service.create();
                    ${js}state.go('${entity.beanName}Search', {}, {reload: true});
            });
        };

        vm.saveContinue = function () {
            //$scope.$broadcast('show-errors-check-validity');
            //if any invalid validation
            //if (!$scope.mainForm || $scope.mainForm.$invalid) {
            console.log('TODO: Validate Errors');
            //    return;
            //}

            console.log('Requesting save on ${entityBeanName}');
                vm.searchSelects.toEntity(vm.entity);
                ${entityBeanName}Service.save(vm.entity, function (successResult) {
                console.log(successResult);
                    ${js}state.go('${entity.beanName}Edit.main', {id: successResult.id}, {reload: true});

            });
        };

        // ******************************************************************************************
        // Modals methods definitions
        // ******************************************************************************************
        // Create ${entity.name} Modal Window
            vm.open = function (size) {
                vm.searchSelects.toEntity(vm.entity);
            var modalInstance = ${js}modal.open({
                templateUrl: 'create${entity.name}Modal.html', controller: 'Modal${entity.name}Controller', size: size,
                resolve: {
                    data: function () {
                        return vm.entity;
                    }
                }
            });
            modalInstance.result.then(function (selectedItem) {
                    vm.selected = selectedItem;
                // Refreshing Result List
                    vm.entity = ${entityBeanName}Service.create();
                    vm.search();
            }, function () {
                //dismiss
            });
        };

        // Create ${entity.name} Modal Window
            vm.view = function (size, entityName) {
                vm.searchSelects.toEntity(vm.entity);
            var modalInstance = ${js}modal.open({
                templateUrl: ('view' + entityName + 'Modal.html'),
                controller: 'Modal' + entityName + 'Controller',
                size: size,
                resolve: {
                    data: function () {
                        return vm.entity;
                    }
                }
            });
        };

        vm.remove = function (obj) {
            var modalInstance = ${js}modal.open({
                templateUrl: 'confirmRemove${entity.name}Modal.html',
                controller: 'Modal${entity.name}Controller',
                size: 'lg',
                resolve: {
                    data: function () {
                        return vm.entity;
                    },
                    readonly: function () {
                        return true;
                    }
                }
            });
            modalInstance.result.then(function (selectedItem) {
                //vm.search();
                    ${js}state.go('${entityBeanName}Search', {}, {reload: true});
            }, function () {
                //dismiss
            });
        };

        // Inline Update Modal
            vm.edit${entity.name} = function (obj) {
            var modalInstance = ${js}modal.open({
                templateUrl: 'create${entity.name}Modal.html', controller: 'Modal${entity.name}Controller', size: 'lg',
                resolve: {
                    data: function () {
                        return obj;
                    },
                    readonly: function () {
                        return false;
                    }
                }
            });
            modalInstance.result.then(function (selectedItem) {
                    vm.selected = selectedItem;
                // Refreshing Result List
                    vm.scope.search();
            }, function () {
                //dismiss
            });
        };

        // ****************************************
        // Controller init (on load) service calls
        // ****************************************
        // if in edit mode get the wanted ${entityBeanName}
        if (${js}stateParams.id) {
            var id = ${js}stateParams.id;

            console.log('retrieving rename.id = ' + id  );

            ${entityBeanName}Service.get( {'id': id} , function (data) {
                vm.entity = data;                           // set managed entity from service
                vm.original = vm.entity;                // backup original values;
                vm.searchSelects.fromEntity(vm.entity); // update search selects values;
            }, function (error){
                console.log(error);                             // TODO:
            });
        }

    }

})();
