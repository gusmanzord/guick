#set( $js  = "$")
#set( $entityBeanName = ${util.uncapitalize($entity.name)} )
#set( $projectBeanName = ${util.uncapitalize($project.name)} )
(function() {

	'use strict';

    /**
     * @ngdoc function
     * @name ${projectBeanName}App.controller:${entityBeanName}Controller
     * @description
     * # ${entityBeanName}Controller
     * Controller of the ${projectBeanName}App
     */
    angular.module('${projectBeanName}App')
        .controller('${entityBeanName}EditController', ${entityBeanName}EditController);

        ${entityBeanName}EditController.$inject = ['${js}scope', '${js}state', '${js}stateParams', '${js}modal', '${js}location',
            'jsog', '${entityBeanName}Service'#foreach( ${ent} in ${entity.getDistinctedAllComplexProperties()})#set( $beanName = ${util.uncapitalize($ent.referedEntity.name)} )#if(${beanName} != ${entityBeanName}), '${beanName}Service'#{end}#{end}];

        function ${entityBeanName}EditController(${js}scope, ${js}state, ${js}stateParams , ${js}modal, ${js}location, jsog, ${entityBeanName}Service #foreach( ${ent} in ${entity.getDistinctedAllComplexProperties()})#set( $beanName = ${util.uncapitalize($ent.referedEntity.name)} )#if(${beanName} != ${entityBeanName}), ${beanName}Service#{end}#{end} ) {

            var vm = this;

            // ***************************
            // Model Initializations
            // ***************************
            vm.maxSelectBoxSize = 300;
            vm.original = {};
            vm.entity = ${entityBeanName}Service.create();
            vm.searchSelects = ${entityBeanName}Service.factorySearchSelect(); // Text Search Select utility Object
            vm.searchSelects.fromEntity(vm.entity);

            // ***************************************${entity.beanName}
            // Controller Methods definitions
            // ***************************************
            vm.get = function( id ) {
                if (!id) {
                    id = ${js}stateParams.id;                           // get id parameter from ui-router
                }
                console.log('retrieving rename.id = ' + id  );
                ${entityBeanName}Service.get( {'id':id} , function (data) {
                    vm.entity = data;                           // set managed entity from service
                    vm.original = ${js}scope.entity;                // backup original values;
                    vm.searchSelects.fromEntity(${js}scope.entity); // update search selects values;
                }, function (error){
                    console.log(error);                             // TODO:
                });
            };

            vm.clearForm = function () {
                vm.entity = vm.original;
            };

            // ************************************
            // watches
            // ************************************
            vm.changeTab = function (tab) {
                $state.go(tab);
                vm.tabSelected = tab;
            }

            // ****************************************
            // Controller init (on load) service calls
            // ****************************************
            vm.tabs = [];
            vm.tabs.push({heading: "Principal", route: "${entity.beanName}Edit.main", icon: "mdi-home", visible: "true"});
    #foreach( ${complexProperty} in ${entity.getManyToOneProperties()})
    #if(!${complexProperty.referedEntity.looksLikeEnum()} )
    vm.tabs.push({heading: "${complexProperty.title}", route: "${entity.beanName}Edit.${complexProperty.beanName}", icon: "mdi-eye", visible: ${js}stateParams.id});
    #end
    #end
            #foreach( ${complexProperty} in ${entity.getDistinctedAllComplexProperties()})
            #if (${complexProperty.isOneToMany()} ) ## || ${complexProperty.isManyToMany()}
            ##TODO Many to many needs special query
            vm.tabs.push({heading: "${complexProperty.title}", route: "${entity.beanName}Edit.${complexProperty.beanName}", icon: "mdi-label", visible: ${js}stateParams.id});
            #end
            #end

            vm.tabSelected = '${entity.beanName}Edit.main';

            // Selects to Fullfill select boxes
            // Begin block
            #foreach( ${ent} in ${entity.getDistinctedAllComplexProperties()})
            #if( ${ent.isManyToOne()} && !${ent.referedEntity.looksLikeMainEntity()})## Caso nao seja muito grande e portanto caiba num select box ...
            #set( $beanName = ${util.uncapitalize($ent.referedEntity.name)} )
    ${beanName}Service.findAll( {page:1 , size:vm.maxSelectBoxSize}, function (data) {
            vm.${beanName}List = jsog.decode(data.content);
            });
            #end
            #end

        }

})();
