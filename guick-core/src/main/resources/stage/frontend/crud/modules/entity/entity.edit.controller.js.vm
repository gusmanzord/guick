#set( $js  = "$")
#set( $entityBeanName = ${util.uncapitalize($entity.name)} )
#set( $projectBeanName = ${util.uncapitalize($project.name)} )

(function() {

	'use strict';

    /**
     *  Guick Generate class: https://github.com/wdavilaneto/guick
     *  Author: service-wdavilaneto@redhat.com
     *  This source is free under The Apache Software License, Version 2.0
     *  license url http://www.apache.org/licenses/LICENSE-2.0.txt
     *
     * @ngdoc function
     * @name ${projectBeanName}App.controller:${entityBeanName}Controller
     * @description
     * # ${entityBeanName}Controller
     * Controller of the ${projectBeanName}App
     */
    angular.module('${projectBeanName}App')

        .controller('${entityBeanName}EditController', ['${js}scope', '${js}state', '${js}stateParams', '${js}modal', '${js}location', 'jsog', '${entityBeanName}Service', #foreach( ${ent} in ${entity.getDistinctedAllComplexProperties()})#set( $beanName = ${util.uncapitalize($ent.referedEntity.name)} )#if(${beanName} != ${entityBeanName})'${beanName}Service', #{end}#{end}
         function (${js}scope, ${js}state, ${js}stateParams , ${js}modal, ${js}location, jsog, ${entityBeanName}Service #foreach( ${ent} in ${entity.getDistinctedAllComplexProperties()})#set( $beanName = ${util.uncapitalize($ent.referedEntity.name)} )#if(${beanName} != ${entityBeanName}), ${beanName}Service#{end}#{end} ) {

        // ***************************
        // Model Initializations
        // ***************************
        ${js}scope.maxSelectBoxSize = 300;
        ${js}scope.original = {};
        ${js}scope.entity = ${entityBeanName}Service.create();
        ${js}scope.searchSelects = ${entityBeanName}Service.factorySearchSelect(); // Text Search Select utility Object
        ${js}scope.searchSelects.fromEntity(${js}scope.entity);

        // ***************************************${entity.beanName}
        // Controller Methods definitions
        // ***************************************
        ${js}scope.get = function( id ) {
            if (!id) {
                id = ${js}stateParams.id;                           // get id parameter from ui-router
            }
            console.log('retrieving rename.id = ' + id  );
            ${entityBeanName}Service.get( {'id':id} , function (data) {
                ${js}scope.entity = data;                           // set managed entity from service
                ${js}scope.original = ${js}scope.entity;                // backup original values;
                ${js}scope.searchSelects.fromEntity(${js}scope.entity); // update search selects values;
            }, function (error){
                console.log(error);                             // TODO:
            });
        };

        $scope.clearForm = function () {
            $scope.entity = $scope.original;
        };

        // ************************************
        // watches
        // ************************************
        $scope.changeTab = function (tab) {
          $state.go(tab);
          $scope.tabSelected = tab;
        }

        // ****************************************
        // Controller init (on load) service calls
        // ****************************************
        ${js}scope.tabs = [];
        ${js}scope.tabs.push({heading: "Principal", route: "${entity.beanName}Edit.main", icon: "mdi-home", visible: "true"});
#foreach( ${complexProperty} in ${entity.getManyToOneProperties()})
#if(!${complexProperty.referedEntity.looksLikeEnum()} )
       ${js}scope.tabs.push({heading: "${complexProperty.title}", route: "${entity.beanName}Edit.${complexProperty.beanName}", icon: "mdi-eye", visible: ${js}stateParams.id});
#end
#end
#foreach( ${complexProperty} in ${entity.getDistinctedAllComplexProperties()})
#if (${complexProperty.isOneToMany()} ) ## || ${complexProperty.isManyToMany()}
##TODO Many to many needs special query
      ${js}scope.tabs.push({heading: "${complexProperty.title}", route: "${entity.beanName}Edit.${complexProperty.beanName}", icon: "mdi-label", visible: ${js}stateParams.id});
#end
#end
        ${js}scope.tabSelected = '${entity.beanName}Edit.main';

        // Selects to Fullfill select boxes
        // Begin block
#foreach( ${ent} in ${entity.getDistinctedAllComplexProperties()})
#if( ${ent.isManyToOne()} && !${ent.referedEntity.looksLikeMainEntity()})## Caso nao seja muito grande e portanto caiba num select box ...
#set( $beanName = ${util.uncapitalize($ent.referedEntity.name)} )
        ${beanName}Service.findAll( {page:1 , size:${js}scope.maxSelectBoxSize}  , function (data) {
             ${js}scope.${beanName}List = jsog.decode(data.content);
        });
#end
#end

    }]);

})();
