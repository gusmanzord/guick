/*
 * Esse arquivo pertence a Petrobras e nao pode ser utilizado fora
 * dessa empresa sem previa autorizacao.
 */

package ${enum.getPackage()};

/**
 * Enumeracao ${enum.getName()}.
 */
public enum ${enum.getName()} {
#set( $index = 1 )
#set( $totalValues = ${enum.getCheckValues().size()} )
#foreach( ${property} in ${enum.getCheckValues()})

    ${property.name}("${property}")#if($index < ${totalValues}),#else;#end
    #set($index = $index + 1)

#end

    /**
     * Id.
     */
    private String id;

    /**
     * Construtor padrao.
     *
     * @param newId O identificador desta Enumeracao
     */
    private ${enum.getName()}(final String newId) {
        this.id = newId;
    }

    /**
     * Retorna o identificador desta Enumeracao.
     * @return id
     */
    public String getId() {
        return id;
    }

    /**
    * Obtem uma instancia desta classe a partir do valor de um outro objeto.
    *
    * @param valor
    *          O valor a partir do qual se obtera a instancia desta classe.
    * @return  Uma instancia desta classe correspondente ao valor passado
    *          como parametro ou excecao caso o parametro passado for
    *          <code>null</code> ou nao estiver dentro dos valores
    *          possiveis da enumeracao.
    */
    public static ${enum.getName()} from(final String valor) {
        if (valor == null) {
                throw new IllegalArgumentException();
        }

        for (${enum.getName()} e : ${enum.getName()}.values()) {
            if (valor.equals(e.id) || valor.equals(e.name())) {
                return e;
            }
        }

        final StringBuilder msg = new StringBuilder("");
        msg.append("Cannot parse into an element of ${enum.getName()}: '");
        msg.append(valor);
        msg.append("'");

        throw new IllegalArgumentException(msg.toString());
    }
}