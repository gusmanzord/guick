/**
 *  Guick Generate class: https://github.com/wdavilaneto/guick
 *  Author: service-wdavilaneto@redhat.com
 *  This source is free under The Apache Software License, Version 2.0
 *  license url http://www.apache.org/licenses/LICENSE-2.0.txt
 */
package ${entity.getPackage()};

import java.util.HashSet;
import java.util.Set;
import javax.persistence.*;
import javax.validation.constraints.*;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.hibernate.annotations.*;
import javax.persistence.*;

import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import org.springframework.format.annotation.DateTimeFormat;
#foreach( ${property} in ${entity.getEnums()})
import ${entity.getPackage()}.domain.${property.getName()};
#end


/**
 * ${entity.getName()}  
 * A classe ${entity.getName()} representa o mapeamento Objeto-Relacional
 * da entidade de negocio armazenada na tabela ${entity.getTable().getName()}.
 *${entity.table.comment}
 */
@Entity
@Table(name = "${entity.getTable().getName()}")
#if( !$entity.getId().isEmbeddable() && !$entity.getParent() )
@SequenceGenerator(name = "${entity.getTable().getSequenceName()}", sequenceName = "${entity.getTable().getSequenceName()}")
#end
#if( $entity.childrens.size() > 0 )
@Inheritance(strategy= InheritanceType.JOINED)
#end
#if( $entity.getParent() )
@PrimaryKeyJoinColumn
#end
public class ${entity.getName()}#if( $entity.getParent() ) extends ${entity.getParent().getName()}#{else} implements Serializable#{end} {


#if(!$entity.isEmbeddable() and !$entity.getParent() )
#if($entity.getId().isEmbeddable() )
    @EmbeddedId
#else
#set( $id = $entity.getId())
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO, generator = "${entity.getTable().getSequenceName()}")
    @Column(name="$entity.id.column.name"#if(${entity.id.column.precision}), precision = ${entity.id.column.precision}#{end}#if(${entity.id.column.scale}), scale = ${entity.id.column.scale}#{end} )
#end
    ${entity.getId().getType()} id

#end
#parse( "stage/domain/groovy/simpleProperties.vm" )
#foreach( ${property} in ${entity.getEnums()})
    @Enumerated(EnumType.STRING)
    @Type(
        type = "br.com.petrobras.fcorp.persistence.dao.hibernate.support.GenericEnumUserType",
        parameters = [
            @Parameter(
                name = "enumClass",
                value = "${entity.getPackage()}.domain.${property.getName()}")
        ])
    @Column(name = "${property.getSimpleProperty().getColumn().getName()}", nullable = false, length = 2)
    @NotBlank
    ${property.getName()} ${property.getSimpleProperty().getName()}

#end
#foreach( ${property} in ${entity.getOneToManyProperties()})
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "#if( ${property.referedEntity.id.containsPropertyName( $util.uncapitalize( ${entity.getName()} ) )}  )id.#{end}$util.uncapitalize( ${entity.getName()} )")
    List<$property.type> $property.getName() = new ArrayList<$property.type>(0)

#end
#parse( "stage/domain/groovy/manyToOneProperties.vm" )
#parse( "stage/domain/groovy/manyToManyProperties.vm" )
#if(!$entity.isEmbeddable() and !$entity.getParent() )
    public ${entity.getId().getType()} getId() {
        return this.id;
    }

    public void setId(${entity.getId().getType()} value) {
        this.id = value;
    }

#end
    /**
     * {@inheritDoc}
     */
    @Override
    public int hashCode() {
        return new HashCodeBuilder()
#foreach( ${property} in ${entity.properties})
               .append(${property.name})
#end
               .toHashCode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == null) { return false }
        if (obj == this) { return true }
        if (obj.getClass() != getClass()) {
            return false
        }

#if ( !${entity.properties.empty})
        ${entity.getName()} rhs = (${entity.getName()}) obj
#end
        return new EqualsBuilder()
                .appendSuper(super.equals(obj))
#foreach( ${property} in ${entity.properties})
                .append(${property.name}, rhs.${property.name})
#end
                .isEquals()
    }

}