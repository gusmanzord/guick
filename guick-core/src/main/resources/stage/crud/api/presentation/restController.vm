#set( $open  = "${")
#set( $close = "}")
#set( $entityBeanName = ${util.uncapitalize($entity.name)} )
/**
 *  Guick Generate class: https://github.com/wdavilaneto/guick
 *  Author: service-wdavilaneto@redhat.com
 *  This source is free under The Apache Software License, Version 2.0
 *  license url http://www.apache.org/licenses/LICENSE-2.0.txt
 */
package ${project.group}.${project.name}.api.rest;

import ${project.group}.${project.name}.api.rest.dto.Pagination;
import ${project.group}.${project.name}.api.rest.dto.SearchFilter;
import ${project.group}.${project.name}.domain.${entity.name};
import ${project.group}.${project.name}.api.service.I${entity.name}Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.annotation.Resource;
import javax.validation.Valid;

/**
 *  CRUD Rest Json 'Controller' for entity${entity.name}
 *  Guick Generate class:
 *  https://github.com/wdavilaneto/guick
 *  Author: service-wdavilaneto@redhat.com
 */
@RestController
@RequestMapping(value="/${entity.name}")
public class ${entity.name}Controller {

    private static PageRequest DEFAULT_PAGE = new PageRequest(0,20);

    private static final Logger LOGGER = LoggerFactory.getLogger(${entity.name}Controller.class);

    @Resource(name = "${entityBeanName}Service")
    private I${entity.name}Service ${entityBeanName}Service;

    /**
     * Returns an full, but Paged, list of all entities (${entity.name})
     * @param pagination
     * @return
     */
    @RequestMapping(method = RequestMethod.GET)
    public HttpEntity<Page<${entity.name}>> findAll(Pagination pagination) {
        return new HttpEntity(${entityBeanName}Service.findAll(pagination.getPageable()));
    }

    /**
     * Returns a paged and filtered list with an given example (ignoring relationship examples beyond id)
     * @param filter
     * @return
     */
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    public HttpEntity<Page<${entity.name}>> search(@RequestBody SearchFilter<${entity.name}> filter) {
        return new HttpEntity(${entityBeanName}Service.search(filter.getContent() , filter.getPageable()));
    }

    /**
     * Request first page of a text based search on all fields ignoring associations
     * @param text
     * @return
     */
    @RequestMapping(value = "/searchText", method = RequestMethod.GET)
    public HttpEntity<Page<${entity.name}>> searchTextGet(String text) {
        return new HttpEntity(${entityBeanName}Service.searchText(text , DEFAULT_PAGE ));
    }
    /**
     * Returns a paged and filtered list with an given example (ignoring relationship examples beyond id)
     * @param filter
     * @return
     */
    @RequestMapping(value = "/searchText", method = RequestMethod.POST)
    public HttpEntity<Page<${entity.name}>> searchText(@RequestBody SearchFilter<String> filter) {
        return new HttpEntity(${entityBeanName}Service.searchText(filter.getContent() , filter.getPageable()));
    }


    /**
     * Return an entity,${entity.name} ,with an Given ID
     * @param id
     * @return
     */
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public HttpEntity<${entity.name}> get(@PathVariable Long id) {
        return new HttpEntity<>(${entityBeanName}Service.findOne(id));
    }

    /**
     * Deletes an entity with an given ID
     * @param id
     * @return
     */
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public HttpEntity delete(@PathVariable Long id) {
        ${entityBeanName}Service.delete(id);
        return new HttpEntity(null);
    }

    /**
     * Simple save or update an entity
     * @param ${entityBeanName}
     * @return
     */
    @RequestMapping(method = RequestMethod.POST)
    public HttpEntity<${entity.name}> save(@RequestBody ${entity.name} ${entityBeanName}) {
        ${entityBeanName}Service.save(${entityBeanName});
        return new HttpEntity<${entity.name}>(${entityBeanName});
    }

}
