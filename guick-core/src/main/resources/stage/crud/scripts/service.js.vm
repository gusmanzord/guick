#set( $js  = "$")
#set( $open  = "${")
#set( $close = "}")
#set( $entityBeanName = ${util.uncapitalize($entity.name)} )
#set( $projectBeanName = ${util.uncapitalize($project.name)} )
'use strict';

/**
 * @ngdoc service
 * @name ${projectBeanName}App.${projectBeanName}Service
 * @description
 * # myService
 * Factory in the ${projectBeanName}App.
 */

var ${projectBeanName}Services = angular.module('${projectBeanName}Services');

${projectBeanName}Services.factory('${entityBeanName}Service', ['$resource', 'gridService',
    function ($resource, gridService) {
        var service = $resource('/${projectBeanName}/api/${entity.name}/:id', {}, {
            'findAll': { method: 'GET', url: '/${projectBeanName}/api/${entity.name}', isArray: false},
            'search': { method: 'POST', url: '/${projectBeanName}/api/${entity.name}/search', isArray: false},
            'searchText': { method: 'POST', url: '/${projectBeanName}/api/${entity.name}/searchText', isArray: false},
            'findAllOverdue':{ method: 'GET', url: '/${projectBeanName}/api/${entity.name}/overdue', isArray: false},
            'get': { method: 'GET'},
            'save': { method: 'POST'},
            'remove': { method: 'DELETE'}
        });

        var entity = {};

        service.getCurrentEntity = function (){
            return entity;
        };

        service.setCurrentEntity = function (obj){
            entity = obj;
        };

        service.create = function (){
            var e = {
#set($size = ${entity.getManyToOneProperties().size()} )
#set($counter = 0)
#foreach( ${ent} in ${entity.getManyToOneProperties()})
#set($counter = $counter + 1)
                //${util.uncapitalize($ent.name)}:{}#if($counter < $size),
#end
#end

            };
            return e;
        };

        service.factorySearchSelect = function (){
            // Factory SearchSelect Object for all "search text properties"
            var searchSelects = {
#set($searchedEntitys = [])
#foreach( ${complexProperty} in ${entity.getManyToOneProperties()} )
#set( $foo = ${searchedEntitys.add( $complexProperty )} )
#end
#foreach( ${complexProperty} in ${entity.parent.getManyToOneProperties()} )
#set( $foo = ${searchedEntitys.add( $complexProperty )} )
#end
#set($size = ${searchedEntitys.size()} )
#set($counter = 0)
#foreach( ${complexProperty} in ${searchedEntitys} )
#set($counter = $counter + 1)
                ${complexProperty.name}:{}#if($counter < $size || (${entity.id.ManyToOneProperties()} )),
#end
#end
#set($idToManySize = ${entity.id.getManyToOneProperties().size()} )
#if($idToManySize && $idToManySize > 0)
                id:{
#end
#set($counter = 0)
#foreach( ${complexProperty} in ${entity.id.getManyToOneProperties()} )
#set($counter = $counter + 1)
                    ${complexProperty.name}:{}#if($counter < $idToManySize ),
#end
#end
#if($idToManySize && $idToManySize > 0)

                }
#end

            };
            // utility method to copy selected object to entity ( reference
            searchSelects.toEntity = function (ref) {
                console.log(ref);
#foreach( ${complexProperty} in ${searchedEntitys} )
#if(${complexProperty.referedEntity.table.count} > 200 || ${complexProperty.referedEntity.looksLikeMainEntity()})
                if (ref && searchSelects.${complexProperty.name}.originalObject) {
                    ref.${complexProperty.name} = searchSelects.${complexProperty.name}.originalObject;
                } else {
                    ref.${complexProperty.name} = null;
                }
#else
##                if (ref && ref.${complexProperty.name} && searchSelects.${complexProperty.name}) {
##                    ref.${complexProperty.name}.id = searchSelects.${complexProperty.name}.id;
##                } else {
##                    ref.${complexProperty.name} = null;
##                }
#end
#end
#######################
#foreach( ${complexProperty} in ${entity.id.getManyToOneProperties()} )
#if(${complexProperty.referedEntity.table.count} > 200 || ${complexProperty.referedEntity.looksLikeMainEntity()})
                if (ref && ref.id && searchSelects.id.${complexProperty.name}.originalObject) {
                    ref.id.${complexProperty.name} = searchSelects.id.${complexProperty.name}.originalObject;
                } else {
                    ref.id = { ${complexProperty.name}:null};
                }
#else
##                if (ref && ref.id && ref.${complexProperty.name} && searchSelects.${complexProperty.name}) {
##                    ref.id.${complexProperty.name}.id = searchSelects.${complexProperty.name}.id;
##                } else {
##                    ref.id.${complexProperty.name} = null;
##                }
#end
#end

            };
            searchSelects.fromEntity = function (ref) {
                console.log(ref);
#foreach( ${complexProperty} in ${searchedEntitys} )
#if(${complexProperty.referedEntity.table.count} > 200 || ${complexProperty.referedEntity.looksLikeMainEntity()})
                if (ref && ref.${complexProperty.name} ) {
                    searchSelects.${complexProperty.name}.originalObject = ref.${complexProperty.name};
                }
#else
##                if (ref && ref.${complexProperty.name} ) {
##                    searchSelects.${complexProperty.name} = ref.${complexProperty.name};
##                }
#end
#end
            };
            searchSelects.clear = function() {
#foreach( ${complexProperty} in ${searchedEntitys} )
                searchSelects.${complexProperty.name} = {};
#end
            };
            return searchSelects;
        };

        service.createGridOptions = function (entitySelected, isEditMode){
            var options = gridService.createGridOptions(isEditMode);
#if(!${entity.looksLikeEnum()})
            options.rowTemplate= '<div ng-dblclick="detalhar(row.entity)" ng-style="{ \'cursor\': row.cursor }" ng-repeat="col in renderedColumns" ng-class="col.colIndex()" class="ngCell {{col.cellClass}}"><div class="ngVerticalBar" ng-style="{height: rowHeight}" ng-class="{ ngVerticalBarVisible: !$last }">&nbsp;</div><div ng-cell></div></div>';
#else
            options.rowTemplate= '<div ng-dblclick="edit${entity.name}(row.entity)" ng-style="{ \'cursor\': row.cursor }" ng-repeat="col in renderedColumns" ng-class="col.colIndex()" class="ngCell {{col.cellClass}}"><div class="ngVerticalBar" ng-style="{height: rowHeight}" ng-class="{ ngVerticalBarVisible: !$last }">&nbsp;</div><div ng-cell></div></div>';
#end
            options.columnDefs = [
#set($properties = [])
#if (${entity.parent} && ${entity.parent.properties.size()} < 3 )
#set($properties =  ${entity.parent.properties})
#else
#foreach( ${property} in ${entity.parent.properties})
#if( ${property.column.length} > 3 )
#set( $foo = ${properties.add( $property )} )
#end
#end
#end
######################
#if (${entity.properties.size()} <5)
#set( $foo = ${properties.addAll( ${entity.properties} )} )
#else
#foreach( ${property} in ${entity.properties})
#if( !( ${property.type} == 'String' && ${property.column.length} < 2) )
#set( $foo = ${properties.add( $property )} )
#end
#end
#end
######################
#if( ${entity.table.getFieldThatPointsParentPk()} && ${entity.table.getFieldThatPointsParentPk().size()} >=1)
#foreach( ${property} in ${entity.properties})
#if( ${entity.table.getFieldThatPointsParentPk()[0]} == ${property.column})
#set( $foo = ${properties.remove( $property )} )
#end
#end
#end
######################
#if(${entity.id.type} != 'Long' && !(${entity.table.pk.size()} == 1 && ${entity.table.pk[0].useUUID}) && !(${entity.table.getFieldThatPointsParentPk().size()} == 1))
                {field: 'id', displayName: 'id', sortable: false},
#end
#set($size = ${properties.size()} )
#set($counter = 0)
#foreach( ${property} in ${properties})
#set($counter = $counter + 1)
## Caso seja uma Long ( pode ser foreing key ) e eh uma constriaint, portanto para uma entidade nao mapeada ( oculta-se a chave )
#if( !(${property.type} == 'Long' && ${property.column.constraint} )  && ${property.type} != 'byte[]')
                {field: '${property}', displayName: '${property.title}', sortable: false#if (${property.name.length()} < 5 && ${property.column.length} < 5), width: 30#{end}}#if($counter < $size) ,
#end
#end
#end
#####################
#if (${properties.size()} < 4 && (${entity.getManyToOneProperties().size()} >=1 || ${entity.parent.getManyToOneProperties().size()} >=1) )
#if (${entity.getManyToOneProperties().size()} >=1)
#set( $toOneProperty = ${entity.getManyToOneProperties()[0]} )
#else
#if(${entity.parent.getManyToOneProperties().size()} >=1)
#set( $toOneProperty = ${entity.parent.getManyToOneProperties()[0]} )
#end
#end
### find first StringField
#set ( $stringField = 'id' )
#foreach( ${prop} in ${toOneProperty.referedEntity.properties})
#if(${prop.type} == 'String' && $stringField == 'id' )
#set ($stringField = ${prop})
#end
#end ,

                {field: '${toOneProperty.name}.${stringField}', displayName: '${toOneProperty.referedEntity.title}', sortable: false#if (${stringField.name.length()} < 5 && ${stringField.column.length} < 5), width: 30#{end}}
#end

            ];
            // This options MUST always exists since tables and Cells does not have Doubld Click
            options.columnDefs.push({field:'', displayName: '', cellTemplate: '<a class="btn-detail" ng-click="$event.stopPropagation(); detalhar(row.entity);"><i class="fa fa-edit"></i></a>', width : '35', resizable: false});
            if (isEditMode) {
#if(${entity.looksLikeEnum()})
                options.columnDefs.push({field:'', displayName: '', cellTemplate: '<a class="btn-detail" ng-click="$event.stopPropagation(); edit${entity.name}(row.entity);"><i class="fa fa-twitch"></i></a>', width : '35', resizable: false});
#end
                options.columnDefs.push({field:'', displayName: '', cellTemplate: '<a class="btn-detail" ng-click="$event.stopPropagation(); remove${entity.name}(row.entity);"><i class="fa fa-remove"></i></a>', width : '35', resizable: false});
            }
            return options;

        };
        return service;
    }
]);
