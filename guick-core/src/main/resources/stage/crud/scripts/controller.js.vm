#set( $js  = "$")
#set( $open  = "${")
#set( $close = "}")
#set( $entityBeanName = ${util.uncapitalize($entity.name)} )
#set( $projectBeanName = ${util.uncapitalize($project.name)} )
'use strict';

/**
 *  Guick Generate class: https://github.com/wdavilaneto/guick
 *  Author: service-wdavilaneto@redhat.com
 *  This source is free under The Apache Software License, Version 2.0
 *  license url http://www.apache.org/licenses/LICENSE-2.0.txt
 *
 * @ngdoc function
 * @name ${projectBeanName}App.controller:${entityBeanName}Controller
 * @description
 * # ${entityBeanName}Controller
 * Controller of the ${projectBeanName}App
 */
angular.module('${projectBeanName}App').controller('${entityBeanName}Controller', ['${js}scope', '${js}routeParams', '${js}modal', '${js}location', '${entityBeanName}Service', #foreach( ${ent} in ${entity.complexProperties})#set( $beanName = ${util.uncapitalize($ent.referedEntity.name)} )'${beanName}Service', #{end}  function (${js}scope, ${js}routeParams , ${js}modal, ${js}location, ${entityBeanName}Service #foreach( ${ent} in ${entity.complexProperties})#set( $beanName = ${util.uncapitalize($ent.referedEntity.name)} ), ${beanName}Service#{end} ) {

    ${js}scope.title = 'Search Filter: ${entity.name}';

    // For select boxes on screen TODO ...
    ${js}scope.select = {
#set($size = ${entity.getManyToOneProperties().size()} )
#set($counter = 0)
#foreach( ${ent} in ${entity.getManyToOneProperties()})
#set($counter = $counter + 1)
        ${util.uncapitalize($ent.name)}:{}#if($counter < $size),
#end
#end

    };

    // binded entity on search for filter (fields)
    ${js}scope.${entityBeanName} = {};
    if (${js}routeParams.id) {
        console.log("Request ${entityBeanName} with Id:" + ${js}routeParams.id);
        ${entityBeanName}Service.get( {'id':$routeParams.id} , function (data) {
            ${js}scope.${entityBeanName} = data;
            ${js}scope.select = ${js}scope.${entityBeanName};
        });
    }

    // Paged result for search filter
    ${js}scope.resultPage = {};
    // scoped variable for selections os ng-grid
    ${js}scope.${entityBeanName}Selected = [];

    // ng-grid pagination options
    ${js}scope.pagingOptions = { pageSizes: [10, 20, 50],pageSize: 10,currentPage: 1};

    // pageable for search/filter requests
    ${js}scope.pageable = {page: ${js}scope.pagingOptions.currentPage , size: ${js}scope.pagingOptions.pageSize};

    // Search de tidos os elementos incial ( quando entra na tela )
    ${entityBeanName}Service.findAll( ${js}scope.pageable , function (data) {
        ${js}scope.resultPage = data;
    });

    // Selects to Fullfill select boxes
    // Begin block
#foreach( ${ent} in ${entity.complexProperties})
#if( !${ent.isOneToMany()})
#set( $beanName = ${util.uncapitalize($ent.name)} )
### Encontrar o nome principal do campo texto que fica na busca
#set ( $stringField = 'id' )
#foreach( ${prop} in ${ent.referedEntity.properties})
#if(${prop.type} == 'String' && $stringField == 'id' )
#set ($stringField = ${prop})
#end
#end
    ${beanName}Service.findAll( {page:1 , size:200}  , function (data) {
         ${js}scope.${beanName}List = [{id:0, '${stringField}':' - '}].concat(data.content);
    });
#{end}
#{end}
    // end block



    // Search By Example Methdo definition
    ${js}scope.search = function() {
        console.log("Realizando busca:");
        ${js}scope.pageable = {page: ${js}scope.pagingOptions.currentPage ,size: ${js}scope.pagingOptions.pageSize};
#foreach( ${ent} in ${entity.complexProperties})
#if( !${ent.isOneToMany()})
#set( $beanName = ${util.uncapitalize($ent.name)} )
        ${js}scope.${entityBeanName}.${beanName} = {id: ${js}scope.select.${beanName}.id};
#{end}
#{end}
        ${entityBeanName}Service.search( {'content':${js}scope.${entityBeanName},'pagination':${js}scope.pageable} , function (data) {
            ${js}scope.resultPage = data;
            ${js}scope.result = data.content;
        });
    };

#foreach( ${ent} in ${entity.complexProperties})
#set( $beanName = ${util.uncapitalize($ent.referedEntity.name)} )
#if( ${ent.isOneToMany()})
    ${js}scope.${beanName}Page = [];
    ${js}scope.find${ent.referedEntity.name} = function() {
        ${beanName}Service.search( {'content':{ '${entityBeanName}':${js}scope.${entityBeanName}},'pagination':${js}scope.pageable}  , function (data) {
            ${js}scope.resultPage = data;
        });
    }
#{end}
#{end}

    ${js}scope.gridOptions = {
        data: 'resultPage.content',
        enablePaging: true,
        showFooter: true,
        pagingOptions: ${js}scope.pagingOptions,
        multiSelect: false,
        enableColumnResize: true,
        selectedItems: ${js}scope.${entityBeanName}Selected,
        totalServerItems: 'resultPage.totalElements',
        i18n: 'pt-br',
        columnDefs: [
#foreach( ${property} in ${entity.properties})
## Caso seja uma Long ( pode ser foreing key ) e eh uma constriaint, portanto para uma entidade nao mapeada ( oculta-se a chave )
#if( ${property.type} != 'Long' || !${property.column.constraint} )
            {field: '${property}', displayName: '${property.title}'#if (${property.name.length()} < 5 && ${property.column.length} < 5), width: 30#{end}},
#end
#end
            {field:'', displayName: 'Ação', cellTemplate: '<a class="btn btn-primary btn-sm btn-detail" ng-click="$event.stopPropagation(); detalhar(row.entity);"><i class="fa fa-search"></i> Ver Detalhe</a>', width : '100', resizable: false}
        ]
    };

    $scope.detalhar = function (${entityBeanName}) {
        console.log("Redirecting to edit ${entityBeanName} with id:" + ${entityBeanName}.id);
        ${js}location.path('/edit${entity.name}/' + ${entityBeanName}.id );
    };

    $scope.save = function() {
        console.log("Requesting asve on ${entityBeanName}");
        ${entityBeanName}Service.save( ${js}scope.${entityBeanName} , function (/**successResult**/) {
            //${js}scope.${entityBeanName} = {};
            // back ??
        });
     };

    $scope.remove = function (){
        console.log("Deleting ${entityBeanName} with id:" + ${entityBeanName}.id);
        ${entityBeanName}Service.remove( ${js}scope.${entityBeanName}  , function ( /*successResult*/) {
            ${js}scope.${entityBeanName} = {};
        });
    };

    $scope.clearForm = function () {
        ${js}scope.${entityBeanName} = {};
        ${js}scope.select = {
#set($size = ${entity.getManyToOneProperties().size()} )
#set($counter = 0)
#foreach( ${ent} in ${entity.getManyToOneProperties()})
#set($counter = $counter + 1)
            ${util.uncapitalize($ent.name)}:{}#if($counter < $size),
#end
#end
        };
    };

    // Create ${entity.name} Modal Window
    ${js}scope.open = function (size) {
        var modalInstance = ${js}modal.open({
            templateUrl: 'create${entity.name}Modal.html', controller: 'Modal${entity.name}Controller', size: size,
            resolve: {
                ${entityBeanName}: function () {
                    return $scope.${entityBeanName};
                }
            }
        });
        modalInstance.result.then(function (selectedItem) {
            ${js}scope.selected = selectedItem;
        }, function () {
            //${js}log.info('Modal dismissed at: ' + new Date());
            // Refreshing Result List
            ${entityBeanName}Service.search( {'content':${js}scope.${entityBeanName},'pagination':${js}scope.pageable} , function (data) {
                ${js}scope.resultPage = data;
                ${js}scope.result = data.content;
            });
        });
    };

    // watches
    ${js}scope.${js}watch('pagingOptions', function (newVal, oldVal) {
        if ((newVal.pageSize !== oldVal.pageSize) || (newVal.currentPage !== oldVal.currentPage)) {
            ${js}scope.search();
        }
    }, true);

}]);

// Please note that $modalInstance represents a modal window (instance) dependency.
// It is not the same as the $modal service used above.
angular.module('${projectBeanName}App').controller('Modal${entity.name}Controller', function (${js}scope, ${js}modalInstance, ${entityBeanName}Service, ${entityBeanName}) {

    ${js}scope.${entityBeanName} = ${entityBeanName};

    ${js}scope.save = function () {
        ${entityBeanName}Service.save( ${js}scope.${entityBeanName} , function (/**successResult**/) {
            ${js}scope.${entityBeanName} = {};
        });
        ${js}modalInstance.close(${js}scope.${entityBeanName});
    };

    ${js}scope.cancel = function () {
        ${js}modalInstance.dismiss('cancel');
    };

});