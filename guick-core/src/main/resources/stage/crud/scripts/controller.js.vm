#set( $js  = "$")
#set( $open  = "${")
#set( $close = "}")
#set( $entityBeanName = ${util.uncapitalize($entity.name)} )
#set( $projectBeanName = ${util.uncapitalize($project.name)} )
'use strict';

/**
 *  Guick Generate class: https://github.com/wdavilaneto/guick
 *  Author: service-wdavilaneto@redhat.com
 *  This source is free under The Apache Software License, Version 2.0
 *  license url http://www.apache.org/licenses/LICENSE-2.0.txt
 *
 * @ngdoc function
 * @name ${projectBeanName}App.controller:${entityBeanName}Controller
 * @description
 * # ${entityBeanName}Controller
 * Controller of the ${projectBeanName}App
 */
angular.module('${projectBeanName}App').controller('${entityBeanName}Controller', ['${js}scope', '${js}routeParams', '${js}modal', '${js}location', 'jsog', '${entityBeanName}Service', #foreach( ${ent} in ${entity.getDistinctedAllComplexProperties()})#set( $beanName = ${util.uncapitalize($ent.referedEntity.name)} )#if(${beanName} != ${entityBeanName})'${beanName}Service', #{end}#{end}  function (${js}scope, ${js}routeParams , ${js}modal, ${js}location, jsog, ${entityBeanName}Service #foreach( ${ent} in ${entity.getDistinctedAllComplexProperties()})#set( $beanName = ${util.uncapitalize($ent.referedEntity.name)} )#if(${beanName} != ${entityBeanName}), ${beanName}Service#{end}#{end} ) {

    ${js}scope.title = 'Search Filter: ${entity.name}';
    ${js}scope.editMode = false;
    ${js}scope.maxSelectBoxSize = 300;
    ${js}scope.textSearchActive = true;
    ${js}scope.searchField = {text:''};

    // For select boxes on screen TODO ...
    ${js}scope.entity = ${entityBeanName}Service.create();

    // Text Search Select utility Object
    ${js}scope.searchSelects = ${entityBeanName}Service.factorySearchSelect();

    // if in edit mode get the wanted ${entityBeanName}
    if (${js}routeParams.id) {
        ${js}scope.editMode = true;
        ${entityBeanName}Service.get( {'id':$routeParams.id} , function (data) {
            ${js}scope.entity = data;
            ${js}scope.searchSelects.fromEntity(${js}scope.entity);
        });
    }

    // Paged result for search filter
    ${js}scope.resultPage = {};

    // scoped variable for selections os ng-grid
    ${js}scope.entitySelected = [];

    // ng-grid pagination options
    ${js}scope.pagingOptions = { pageSizes: [10, 20, 50],pageSize: 10,currentPage: 1};

    // pageable for search/filter requests
    ${js}scope.pageable = {page: ${js}scope.pagingOptions.currentPage , size: ${js}scope.pagingOptions.pageSize};

    // Search de todos os elementos incial ( quando entra na tela )
    if (!${js}scope.editMode) {
        ${entityBeanName}Service.findAll( ${js}scope.pageable , function (data) {
            ${js}scope.resultPage = data;
            ${js}scope.resultPage.content = jsog.decode(data.content);
        });
    }


    // Selects to Fullfill select boxes
    // Begin block
#foreach( ${ent} in ${entity.getManyToOneProperties()})
#if( ${ent.referedEntity.table.count} < 200) ## Caso nao seja muito grande e portanto caiba num select box ...
#set( $beanName = ${util.uncapitalize($ent.referedEntity.name)} )
    ${beanName}Service.findAll( {page:1 , size:${js}scope.maxSelectBoxSize}  , function (data) {
         ${js}scope.${beanName}List = jsog.decode(data.content);
    });
#end
#end
    // end block

    ${js}scope.gridOptions = ${entityBeanName}Service.factoryGridOptions($scope.pagingOptions , $scope.entitySelected, #if(${entity.getOneToManyProperties().size()} > 0 ) false #{else}true#{end});

    // Search By Example Method
    ${js}scope.search = function() {
        console.log('Realizando busca');
        // prepare page request
        ${js}scope.pageable = {page: ${js}scope.pagingOptions.currentPage , size: ${js}scope.pagingOptions.pageSize };
        if (${js}scope.textSearchActive) {
            //if (${js}scope.searchField.text.length > 3) {
                ${entityBeanName}Service.searchText( {'content': ${js}scope.searchField.text ,'pagination':${js}scope.pageable} , function (data) {
                    ${js}scope.resultPage = data;
                    ${js}scope.resultPage.content = jsog.decode(data.content);
                });
            //}
        } else {
            // prepare search(d) text object
            ${js}scope.searchSelects.toEntity(${js}scope.entity);

            ${entityBeanName}Service.search( {'content':${js}scope.entity,'pagination':${js}scope.pageable} , function (data) {
                ${js}scope.resultPage = data;
                ${js}scope.resultPage.content = jsog.decode(data.content);
            });
        }
    };

    $scope.detalhar = function (${entityBeanName}) {
        //if (${js}scope.editMode === true && !confirm("Deseja realmente sair do modo de edição do cadastro de ${entity.name}?")){
        //    return false;
        //}
        console.log('Redirecting to edit ${entityBeanName} with id:' + ${js}scope.entity.id);
        ${js}location.path('/edit${entity.name}/' + ${entityBeanName}.id );
    };

    $scope.save = function() {
        console.log('Requesting asve on ${entityBeanName}');
        ${js}scope.searchSelects.toEntity(${js}scope.entity);
        ${entityBeanName}Service.save( ${js}scope.entity , function (successResult) {
            console.log(successResult);
            ${js}scope.entity = ${entityBeanName}Service.create();
            ${js}scope.search();
        });
     };

    $scope.remove = function (){
        console.log('Deleting ${entityBeanName} with id:' + ${js}scope.entity.id);
        ${entityBeanName}Service.remove( ${js}scope.entity  , function ( successResult) {
            console.log(successResult);
            ${js}scope.entity = ${entityBeanName}Service.create();
            ${js}location.path('/${entity.name}/');
        });
    };

    $scope.clearForm = function () {
        console.log('Limpando form filter');
        ${js}scope.entity = ${entityBeanName}Service.create();
        ${js}scope.searchField.text = '';
        ${js}scope.searchSelects.toEntity(${js}scope.entity);
    };

    // ******************************************************************************************
    // Modals
    // ******************************************************************************************
    // Create ${entity.name} Modal Window
    ${js}scope.open = function (size) {
        ${js}scope.searchSelects.toEntity(${js}scope.entity);
        var modalInstance = ${js}modal.open({
            templateUrl: 'create${entity.name}Modal.html', controller: 'Modal${entity.name}Controller', size: size,
            resolve: {
                data: function () {return $scope.entity;}
            }
        });
        modalInstance.result.then(function (selectedItem) {
            ${js}scope.selected = selectedItem;
            // Refreshing Result List
            ${js}scope.entity = ${entityBeanName}Service.create();
            ${js}scope.search();
        }, function () {
            //dismiss
        });
    };

    // Create ${entity.name} Modal Window
    ${js}scope.view = function (size, entityName) {
        ${js}scope.searchSelects.toEntity(${js}scope.entity);
        var modalInstance = ${js}modal.open({
            templateUrl: ('view' +entityName+ 'Modal.html'), controller: 'Modal${entity.name}Controller', size: size,
            resolve: {
                data: function () {
                    return $scope.entity;
                }
            }
        });
    };

    // ******************************************************************************************
    // Master Details: Operations for Search and  editing of OneToMany/ManyToMany
    // ******************************************************************************************
#if( ${entity.looksLikeMainEntity()} )
#foreach( ${ent} in ${entity.getOneToManyProperties()})
#set( $beanName = ${util.uncapitalize(${ent.referedEntity.name})} )
    ${js}scope.grid${beanName}Options = ${beanName}Service.factoryGridOptions($scope.pagingOptions , $scope.entitySelected, true);
    ${js}scope.find${ent.referedEntity.name} = function() {
        console.log('Realizando busca de 1 x N( $beanName.${entityBeanName}.id):' + ${js}scope.entity.id);
        ${js}scope.resultPage = {};
        ${beanName}Service.search( {'content':{ '${entityBeanName}':${js}scope.entity },'pagination':${js}scope.pageable}  , function (data) {
            ${js}scope.resultPage = data;
            ${js}scope.resultPage.content = jsog.decode(data.content);
        });
    };
    $scope.remove${ent.referedEntity.name} = function (obj){
        console.log('Deleting ${beanName} with id:' + obj.id);
        ${beanName}Service.remove( obj , function ( successResult) {
            console.log(successResult);
            ${js}scope.entity = {};
        });
    };
    ${js}scope.edit${ent.referedEntity.name} = function (obj) {
        var modalInstance = ${js}modal.open({
            templateUrl: 'create${ent.referedEntity.name}Modal.html', controller: 'Modal${ent.referedEntity.name}Controller', size: 'lg',
            resolve: {
                data: function () {return obj;}
            }
        });
        modalInstance.result.then(function (selectedItem) {
            ${js}scope.selected = selectedItem;
            // Refreshing Result List
            ${beanName}Service.search( {'content':{ '${entityBeanName}':${js}scope.entity },'pagination':${js}scope.pageable}  , function (data) {
                ${js}scope.resultPage = data;
                ${js}scope.resultPage.content = jsog.decode(data.content);
            });
        }, function () {
            //dismiss
        });
    };
#{end}
#end

#if(${entity.getOneToManyProperties().size()} == 0 )
    // *********************************************************************************************
    // Inline Update/remove Operations: Since this entity, at generation time, had no Master/Details
    // *********************************************************************************************
    ${js}scope.edit${entity.name} = function (obj) {
        var modalInstance = ${js}modal.open({
            templateUrl: 'create${entity.name}Modal.html', controller: 'Modal${entity.name}Controller', size: 'lg',
            resolve: {
                data: function () {return obj;}
            }
        });
        modalInstance.result.then(function (selectedItem) {
            ${js}scope.selected = selectedItem;
             // Refreshing Result List
            ${js}scope.search();
        }, function () {
            //dismiss
        });
    };
    $scope.remove${entity.name} = function (obj){
        var modalInstance = ${js}modal.open({
            templateUrl: 'confirmRemove${entity.name}Modal.html', controller: 'Modal${entity.name}Controller', size: 'lg',
            resolve: {
                data: function () {return obj;}
            }
        });
        modalInstance.result.then(function (selectedItem) {
            ${js}scope.selected = selectedItem;
            ${entity.beanName}Service.remove( obj , function ( successResult) {
                console.log(successResult);
                ${js}scope.search();
            });
        }, function () {
            //dismiss
        });
    };

#end
    ${js}scope.setTextSearchActive = function (value) {
       ${js}scope.textSearchActive = value;
    };

    // watches
    ${js}scope.${js}watch('pagingOptions', function (newVal, oldVal) {
        if ((newVal.pageSize !== oldVal.pageSize) || (newVal.currentPage !== oldVal.currentPage)) {
            ${js}scope.search();
        }
    }, true);

}]);
