#set( $js  = "$")
#set( $open  = "${")
#set( $close = "}")
#set( $entityBeanName = ${util.uncapitalize($entity.name)} )
#set( $projectBeanName = ${util.uncapitalize($project.name)} )
'use strict';

/**
 * @ngdoc function
 * @name ${projectBeanName}App.controller:${entityBeanName}Ctrl
 * @description
 * # AboutCtrl
 * Controller of the ${projectBeanName}App
 */
angular.module('${projectBeanName}App').controller('${entityBeanName}Controller', ['${js}scope', '${js}routeParams', '${js}modal', '${entityBeanName}Service', #foreach( ${ent} in ${entity.complexProperties})#if( !${ent.isOneToMany()})#set( $beanName = ${util.uncapitalize($ent.name)} )'${beanName}Service', #{end}#{end}  function (${js}scope, ${js}routeParams , ${js}modal, ${entityBeanName}Service #foreach( ${ent} in ${entity.complexProperties})#if( !${ent.isOneToMany()})#set( $beanName = ${util.uncapitalize($ent.name)} ), ${beanName}Service#{end}#{end} ) {

    ${js}scope.title = 'Search Filter: ${entity.name}';
    // binded entity on search for filter (fields)
    ${js}scope.${entityBeanName} = {};
    // Paged result for search filter
    ${js}scope.${entityBeanName}Page = {};
    // scoped variable for selections os ng-grid
    ${js}scope.${entityBeanName}Selected = [];

    // ng-grid pagination options
    ${js}scope.pagingOptions = { pageSizes: [10, 20, 50],pageSize: 10,currentPage: 1};

    // pageable for search/filter requests
    ${js}scope.pageable = {page: ${js}scope.pagingOptions.currentPage ,size: ${js}scope.pagingOptions.pageSize};

    // Search de tidos os elementos incial ( quando entra na tela )
    ${entityBeanName}Service.find( {'content':${js}scope.${entityBeanName},'pagination':${js}scope.pageable}, function (data) {
        ${js}scope.${entityBeanName}Page = data;
    });

    // Selects to Fullfill select boxes
    // Begin block
#foreach( ${ent} in ${entity.complexProperties})
#if( !${ent.isOneToMany()})
#set( $beanName = ${util.uncapitalize($ent.name)} )
    ${js}scope.select = {${beanName}:{}}
    ${beanName}Service.findAll( {page: 1, pageSize:200} , function (data) {
         ${js}scope.${beanName}List = data.content;
    });
#{end}
#{end}
    // end block


    // Search By Example Methdo definition
    ${js}scope.search = function() {
        ${js}scope.pageable = {page: ${js}scope.pagingOptions.currentPage ,size: ${js}scope.pagingOptions.pageSize};
#foreach( ${ent} in ${entity.complexProperties})
#if( !${ent.isOneToMany()})
#set( $beanName = ${util.uncapitalize($ent.name)} )
        ${js}scope.${entityBeanName}.${beanName} = {id: ${js}scope.select.${beanName}.id};
#{end}
#{end}
        ${entityBeanName}Service.find( {'content':${js}scope.${entityBeanName},'pagination':${js}scope.pageable} , function (data) {
            ${js}scope.${entityBeanName}Page = data;
            ${js}scope.result = data.content;
        });
    };

    ${js}scope.gridOptions = {
        data: '${entityBeanName}Page.content',
        enablePaging: true,
        showFooter: true,
        pagingOptions: ${js}scope.pagingOptions,
        multiSelect: false,
        selectedItems: ${js}scope.${entityBeanName}Selected,
        totalServerItems: '${entityBeanName}Page.totalElements',
        i18n: 'pt-br',
        columnDefs: [
            {field: 'id', displayName: 'id'},
#set($size = ${entity.properties.size()} )
#set($counter = 0)
#foreach( ${property} in ${entity.properties})
#set($counter = $counter + 1)
            {field: '${property}', displayName: '${property}'}#if($counter < $size),
#end
#end
        ]
    };

    // Create ${entity.name} Modal Window
    ${js}scope.open = function (size) {
        var modalInstance = ${js}modal.open({
            templateUrl: 'create${entity.name}Modal.html', controller: 'Modal${entity.name}Ctrl', size: size,
            resolve: {
                ${entityBeanName}: function () {
                  return $scope.${entityBeanName};
                }
            }
        });
        modalInstance.result.then(function (selectedItem) {
            ${js}scope.selected = selectedItem;
        }, function () {
            //${js}log.info('Modal dismissed at: ' + new Date());
        });
    };

    // watches
    ${js}scope.${js}watch('pagingOptions', function (newVal, oldVal) {
        if ((newVal.pageSize !== oldVal.pageSize) || (newVal.currentPage !== oldVal.currentPage)) {
            ${js}scope.search();
        }
    }, true);
}]);

// Please note that $modalInstance represents a modal window (instance) dependency.
// It is not the same as the $modal service used above.
angular.module('${projectBeanName}App').controller('Modal${entity.name}Ctrl', function (${js}scope, ${js}modalInstance, ${entityBeanName}) {

    ${js}scope.${entityBeanName} = ${entityBeanName};

    ${js}scope.ok = function () {
        ${js}modalInstance.close(${js}scope.${entityBeanName});
    };

    ${js}scope.cancel = function () {
        ${js}modalInstance.dismiss('cancel');
    };

});