#set( $open  = "${")
#set( $close = "}")
#set( $entityBeanName = ${util.uncapitalize($entity.name)} )
/**
 *  Guick Generate class: https://github.com/wdavilaneto/guick
 *  Author: service-wdavilaneto@redhat.com
 *  This source is free under The Apache Software License, Version 2.0
 *  license url http://www.apache.org/licenses/LICENSE-2.0.txt
 */
package ${project.group}.${project.name}.api.service;

import com.google.common.collect.Lists;
import ${project.group}.${project.name}.DatabaseIntegrationTestBase;
import ${project.group}.${project.name}.domain.${entity.name};
import org.hamcrest.core.Is;
import org.junit.Assert;
import org.junit.Test;
import org.springframework.test.context.jdbc.Sql;

import javax.annotation.Resource;
import java.util.List;

public class ${entity.name}IntegrationTest extends DatabaseIntegrationTestBase {

    @Resource
    private I${entity.name}Service ${entityBeanName}Service;

    @Test
    @Sql(scripts = "dml-${entityBeanName}.sql")
    public void testFindAll(){
        Iterable<${entity.name}> ${entityBeanName}Iterable = ${entityBeanName}Service.findAll();
        List<${entity.name}> ${entityBeanName}List = Lists.newArrayList(${entityBeanName}Iterable);
        // .. execute some tests
        Assert.assertThat(${entityBeanName}List.size(), Is.is(1));
    }

    @Test
    public void testPersist(){
        ${entity.name} ${entityBeanName} = new ${entity.name}();
        ${entity.name} ${entityBeanName}Incluido = ${entityBeanName}Service.save(${entityBeanName});
        
#foreach( ${property} in ${entity.properties})
#if ( ${property.getType()} == 'String' )
        ${entityBeanName}.set${property.capitalizedName}("A");
#else
#if ( ${property.getType()} != 'Date')
        ${entityBeanName}.set${property.capitalizedName}(0);
#end
#end
#end

        Assert.assertNotNull(${entityBeanName}Incluido.getId());
#foreach( ${property} in ${entity.properties})
#if ( ${property.getType()} == 'String' )
        Assert.assertThat(${entityBeanName}Incluido.get${property.capitalizedName}(), Is.is("A")); // Obrigatory field
#else
#if ( ${property.getType()} != 'Date')
        Assert.assertThat(${entityBeanName}Incluido.get${property.capitalizedName}(), Is.is(0));
#end
#end
#end

    }

    @Test
    @Sql(scripts = "dml-${entityBeanName}.sql")
    public void testUpdate(){
        ${entity.name} ${entityBeanName}Existente = ${entityBeanName}Service.findOne(1001L);

        ${entityBeanName}Existente.setNome("NOME ALTERADO");
        ${entityBeanName}Existente.setDescricao("DESCRICAO ALTERADA");

        ${entity.name} ${entityBeanName}Alterado = ${entityBeanName}Service.save(${entityBeanName}Existente);

        Assert.assertThat(${entityBeanName}Alterado.getId(), Is.is(${entityBeanName}Existente.getId()));
        Assert.assertThat(${entityBeanName}Alterado.getNome(), Is.is("NOME ALTERADO"));
        Assert.assertThat(${entityBeanName}Alterado.getDescricao(), Is.is("DESCRICAO ALTERADA"));
    }

    @Test
    @Sql(scripts = "dml-${entityBeanName}.sql")
    public void testDelete(){
        ${entityBeanName}Service.delete(1001L);

        ${entity.name} ${entityBeanName}Deletado = ${entityBeanName}Service.findOne(1001L);

        Assert.assertNull("O ${entityBeanName} n√£o foi deletado corretamente!", ${entityBeanName}Deletado);
    }

}